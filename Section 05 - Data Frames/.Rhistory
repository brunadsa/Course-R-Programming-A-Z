myplot(balanced1)
balanced1<-balance(input,output,"ubUnder")
dim(balanced1)
myplot(balanced1)
# balance dataset with SMOTE (creates new points in the minority class)
balanced2<-balance(input,output,"ubSMOTE")
dim(balanced2)
myplot(balanced2)
# Exercice: how does knn behaves with the pre-processed datasets?
knn3 <- knn.cv(balanced1[,1:2], balanced1$Species, k = 1)
table(knn3, balanced1$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
iris3 <- iris[sample(nrow(iris),0.5*nrow(iris)),]
iris4 <- iris[sample(nrow(iris),0.7*nrow(iris)),]
myhist(iris3)
iris4 <- iris[sample(nrow(iris),0.7*nrow(iris)),]
myhist(iris4)
# Exercise2: now sample with replacement
iris5 <- iris[sample(nrow(iris),0.1*nrow(iris), replace = FALSE),]
myhist(iris5)
knn3 <- knn.cv(balanced1[,1:2], balanced1$Species, k = 1)
table(knn3, balanced1$Species)
table(knn4, balanced2$Species)
knn3 <- knn.cv(balanced1[,1:2], balanced1$Species, k = 1)
table(knn3, balanced1$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
knn3 <- knn.cv(balanced1[,1:2], balanced1$Species, k = 1)
table(knn3, balanced1$Species)
# Taking irisPart, which has reduced numbers of features and classes for better visualization
irisM <- irisPart
# taking iris2 and replacing **two** data values by unknown
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
# Taking irisPart, which has reduced numbers of features and classes for better visualization
irisM <- irisPart
# taking iris2 and replacing **two** data values by unknown
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisM[inds,]
irisM <- irisPart
# taking iris2 and replacing **two** data values by unknown
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
# taking iris2 and replacing **two** data values by unknown
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
# taking iris2 and replacing **two** data values by unknown
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[inds] <- NA
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisM[inds,]
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisM[inds,]
##################################################################################################
# Noise filtering
library(NoiseFiltersR)
##################################################################################################
# Noise filtering
install.packages("NoiseFiltersR")
install.packages("NoiseFiltersR")
out <- ENN(Species~., data = irisPart, k = 3)
library(NoiseFiltersR)
out <- ENN(Species~., data = irisPart, k = 3)
summary(out)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
########################################################################################################
# Unbalanced data
library(ggplot2)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
out <- ENN(Species~., data = irisPart, k = 3)
summary(out)
# Exercice1: change the number of neighbors in ENN and see what happens
out2 <- ENN(Species~., data = irisPart, k = 1)
summary(out2)
out3 <- ENN(Species~., data = irisPart, k = 6)
summary(out3)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out2$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out3$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out2$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
out4 <- ENN(Species~., data = irisPart, k = 9)
summary(out4)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out4$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
iris5 <- iris[sample(nrow(iris),0.5*nrow(iris), replace = FALSE),]
iris6 <- iris[sample(nrow(iris),0.7*nrow(iris), replace = FALSE),]
myhist(iris5)
# Taking irisPart, which has reduced numbers of features and classes for better visualization
irisM <- irisPart
# taking iris2 and replacing **two** data values by unknown
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
# replacing values by average
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisM[inds,]
# Exercise: what is the difference if the average is taken only for elements from the same class as the element? Which R command can do that?
irisMall <- sample(1:100, 2, replace=F)
irisMall[inds,]
# Exercise: what is the difference if the average is taken only for elements from the same class as the element? Which R command can do that?
irisMall <- sample(1:100, 2, replace=F)
irisMall[inds,]
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
# Exercise: what is the difference if the average is taken only for elements from the same class as the element? Which R command can do that?
irisMall <- irisPart
indsall <- sample(1:100, 2, replace=F)
irisMall[indsall,]
irisMpart<- irisPart
indspart <- sample(1:100, 2, replace=F)
irisMpart[indspart,]
irisMpart$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisMpart[inds,]
resutl <- irisMall - irisMpart
irisMall
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
# replacing values by average
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
# Exercise: what is the difference if the average is taken only for elements from the same class as the element?
# Which R command can do that?
# virginica
?mean
# Exercise: what is the difference if the average is taken only for elements from the same class as the element?
# Which R command can do that?
# virginica
virginica <- irisM$Species == 'virginica'
View(virginica)
# Exercise: what is the difference if the average is taken only for elements from the same class as the element?
# Which R command can do that?
# virginica
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE
, irisM$Species = 'virginica')
dataset_virginica = irisM[!(irisM$Species != "virginica"),]
View(dataset_virginica)
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(dataset_virginica$Petal.Length, na.rm = TRUE)
irisM[inds,]
inds2 <- sample(1:100, 2, replace=F)
irisM2[inds2,]
irisM2$Petal.Length[inds] <- NA
View(irisM2)
irisM2 <- irisPart
inds2 <- sample(1:100, 2, replace=F)
irisM2[inds2,]
irisM2$Petal.Length[inds] <- NA
View(irisM2)
irisM2 <- irisPart
inds2 <- sample(1:100, 2, replace=F)
irisM2[inds2,]
irisM2$Petal.Length[inds] <- NA
View(irisM2)
n = irisM2['Petal.Length',]
n
n <- irisM2['Petal.Length',] = NA
n <- irisM2['Petal.Length',] == NA
n
n <- irisM2['Petal.Length',]
n
n <- irisM2['Petal.Length']
n
m <- irisM2[!(irisM2$Petal.Length == Na)]
m <- irisM2[!(irisM2$Petal.Length == NA)]
m <- irisM2[!(irisM2$Petal.Length == NA),]
m
irisM
dataset_virginica
# Exercise: what is the difference if the average is taken only for elements from the same class as the element?
# Which R command can do that?
subset(irisM, irisM$Petal.Length== NA)
library(readxl)
remessa2_xls <- read_excel("D:/brunn/Documents/Bruna/03 Formação Acadêmica/03_ITA/02_Disciplinas/06_AM/Projeto/remessa2.xls.xlsx")
View(remessa2_xls)
remessa2_xls
remessa2
View(remessa2_xls)
library(readxl)
remessa3 <- read_excel("D:/brunn/Documents/Bruna/03 Formação Acadêmica/03_ITA/02_Disciplinas/06_AM/Projeto/remessa3.xls")
View(remessa3)
remessa3
summary(remessa3)
# First lets take a look at the data histogram before sampling
library(ggplot2)
library(gridExtra)
library(grid)
myhist <- function(d){
# Sepal length
HisSl <- ggplot(data=d, aes(x=Sepal.Length))+
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Sepal Length (cm)") +
ylab("Frequency") +
theme(legend.position="none")+
ggtitle("Histogram of Sepal Length")+
geom_vline(data=d, aes(xintercept = mean(Sepal.Length)),linetype="dashed",color="grey")
# Sepal width
HistSw <- ggplot(data=d, aes(x=Sepal.Width)) +
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Sepal Width (cm)") +
ylab("Frequency") +
theme(legend.position="none")+
ggtitle("Histogram of Sepal Width")+
geom_vline(data=d, aes(xintercept = mean(Sepal.Width)),linetype="dashed",color="grey")
# Petal length
HistPl <- ggplot(data=d, aes(x=Petal.Length))+
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Petal Length (cm)") +
ylab("Frequency") +
theme(legend.position="none")+
ggtitle("Histogram of Petal Length")+
geom_vline(data=d, aes(xintercept = mean(Petal.Length)),
linetype="dashed",color="grey")
# Petal width
HistPw <- ggplot(data=d, aes(x=Petal.Width))+
geom_histogram(binwidth=0.2, color="black", aes(fill=Species)) +
xlab("Petal Width (cm)") +
ylab("Frequency") +
theme(legend.position="right" )+
ggtitle("Histogram of Petal Width")+
geom_vline(data=d, aes(xintercept = mean(Petal.Width)),linetype="dashed",color="grey")
# Plot all visualizations
grid.arrange(HisSl + ggtitle(""),
HistSw + ggtitle(""),
HistPl + ggtitle(""),
HistPw  + ggtitle(""),
nrow = 2,
top = textGrob("Iris Frequency Histogram",
gp=gpar(fontsize=15))
)
}
# histogram for the original dataset
myhist(iris)
# some statistics
summary(iris)
# Now lets sample 10% of the dataset, randomly
iris2 <- iris[sample(nrow(iris),0.1*nrow(iris)),]
# Lets see the histogram of the sampled data
myhist(iris2)
# some statistics
summary(iris2)
# Exercise1: modify sampling rate to 0.5 and 0.7 and see what happens to the histograms and summary for iris2
iris3 <- iris[sample(nrow(iris),0.5*nrow(iris)),]
iris4 <- iris[sample(nrow(iris),0.7*nrow(iris)),]
myhist(iris3)
iris4 <- iris[sample(nrow(iris),0.7*nrow(iris)),]
myhist(iris4)
# Exercise2: now sample with replacement
iris5 <- iris[sample(nrow(iris),0.5*nrow(iris), replace = FALSE),]
iris6 <- iris[sample(nrow(iris),0.7*nrow(iris), replace = FALSE),]
myhist(iris5)
myhist(iris5)
myhist(iris6)
########################################################################################################
# Unbalanced data
library(ggplot2)
myplot <- function(d){
ggplot(data=d, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width")
}
# Part of iris data, two features just for easing plots, and two classes
irisPart <- subset(iris, select = Petal.Length:Species)
irisPart <- subset(irisPart,Species != "setosa")
irisPart <- droplevels(irisPart)
# Plotting
View(irisPart)
myplot(irisPart)
# Plotting
View(irisPart)
# making unbalanced version
irisUmb <- rbind(irisPart[ sample( which( irisPart$Species == "versicolor" ) , 10 ) , ],irisPart[which(irisPart$Species == "virginica" ),])
# Plotting
myplot(irisUmb)
# Lets see what happens to unbalanced data
library(class)
table(knn1, irisPart$Species)
# 1nn with iris3
knn2 <- knn.cv(irisUmb[,1:2], irisUmb$Species, k = 1)
table(knn2, irisUmb$Species)
# some functions for balancing data
install.packages("unbalanced")
library(unbalanced)
# for using the functions, the class must be a binary factor where the majority class is coded as 0 and the minority as 1
#
levels(irisUmb$Species)[levels(irisUmb$Species)=="virginica"] <- "0"
# for using the functions, the class must be a binary factor where the majority class is coded as 0 and the minority as 1
#
levels(irisUmb$Species)[levels(irisUmb$Species)=="virginica"] <- "0"
levels(irisUmb$Species)[levels(irisUmb$Species)=="versicolor"] <- "1"
output<-irisUmb$Species
input<-irisUmb[ ,-ncol(irisUmb)]
balance <- function(input,output,typ){
data<-ubBalance(X= input, Y=output, type=typ, verbose=TRUE)
balancedData<-cbind(data$X,data$Y)
names(balancedData)[3] <- "Species"
balancedData
}
balanced1<-balance(input,output,"ubUnder")
dim(balanced1)
myplot(balanced1)
balanced2<-balance(input,output,"ubSMOTE")
dim(balanced2)
myplot(balanced2)
knn3 <- knn.cv(balanced1[,1:2], balanced1$Species, k = 1)
table(knn3, balanced1$Species)
knn4 <- knn.cv(balanced2[,1:2], balanced2$Species, k = 1)
table(knn4, balanced2$Species)
# Taking irisPart, which has reduced numbers of features and classes for better visualization
irisM <- irisPart
inds <- sample(1:100, 2, replace=F)
irisM[inds,]
irisM$Petal.Length[inds] <- NA
View(irisM)
irisM$Petal.Length[is.na(irisM$Petal.Length)] <- mean(irisM$Petal.Length, na.rm = TRUE)
irisM[inds,]
subset(irisM, irisM$Petal.Length== NA)
install.packages("NoiseFiltersR")
library(NoiseFiltersR)
out <- ENN(Species~., data = irisPart, k = 3)
summary(out)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
out2 <- ENN(Species~., data = irisPart, k = 1)
out3 <- ENN(Species~., data = irisPart, k = 6)
out4 <- ENN(Species~., data = irisPart, k = 9)
summary(out2)
summary(out3)
summary(out4)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out2$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out3$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
ggplot(data=irisPart, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color=Species, shape=Species)) +
xlab("Petal Length") +
ylab("Petal Width") +
ggtitle("Petal Length vs Width") +
geom_point(data=irisPart[out4$remIdx, ], aes(x = Petal.Length, y = Petal.Width), colour="black", size=5)
library(readxl)
remessa3 <- read_excel("D:/brunn/Documents/Bruna/03 Formação Acadêmica/03_ITA/02_Disciplinas/06_AM/Projeto/remessa3.xls")
View(remessa3)
summary(remessa3)
remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA
remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA == TRUE
#--------------------------------- Filtering Data Frames
#Rows*
head(remessa3)
filter <- remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA == TRUE
remessa3[filter,] #vector with TRUE or FALSE
remessa3[filter,] #vector with TRUE or FALSE
remessa3[remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA == TRUE,]
levels(remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA)
str(remessa3)
nrow(remessa3) #number of rows
ncol(remessa3) #number of colunms
head(remessa3) #top 6 rows of Data
head(remessa3, n=10)
tail(remessa3) #bottom 6 rows of Data
tail(remessa3, n=8)
str(stats) #str() runif() rnorm()
str(remessa3) #str() runif() rnorm()
summary(remessa3)
remessa3[3,3]
stats[3,"TDREMESSA_HORA"]
remessa3[3,"TDREMESSA_HORA"]
remessa3$TDREMESSA_ID[2]
remessa3[,"TDREMESSA_ID"]
factor(remessa$TDREMESSA_INDICADOR_INADIMPLENCIA)
library(readxl)
remessa3 <- read_excel("D:/brunn/Documents/Bruna/03 Formação Acadêmica/03_ITA/02_Disciplinas/06_AM/Projeto/remessa3.xls")
View(remessa3)
factor(remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA)
remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA <- factor(remessa3$TDREMESSA_INDICADOR_INADIMPLENCIA)
str(remessa3)
v <- ggplot(data=remessa3, aes(x=TDREMESSA_INDICADOR_INADIMPLENCIA))
v + geom_histogram(binwidth=10, aes(fill=Genre),
colour="Black")
v <- ggplot(data=remessa3, aes(x=TDREMESSA_INDICADOR_INADIMPLENCIA))
library(ggplot2)
v <- ggplot(data=remessa3, aes(x=TDREMESSA_INDICADOR_INADIMPLENCIA))
v + geom_histogram(binwidth=10, aes(fill=Genre),
colour="Black")
v + geom_histogram(binwidth=10, colour="Black")
v + geom_histogram(colour="Black")
ggplot(data=remessa3, aes(x=TDREMESSA_INDICADOR_INADIMPLENCIA))
qplot(data=remessa3, x=TDREMESSA_INDICADOR_INADIMPLENCIA)
s <- ggplot(data=remessa3, aes(x=TDREMESSA_INDICADOR_INADIMPLENCIA))
s + geom_histogram(binwidth=10)
s <- ggplot(data=remessa3, aes(x=TDREMESSA_INDICADOR_INADIMPLENCIA))
s + geom_histogram(binwidth=10)
s
qplot(data=remessa3, x=TDREMESSA_INDICADOR_INADIMPLENCIA)
View(remessa3)
qplot(data=remessa3, x=TDREMESSA_VL_LIMITE_PARCELA)
qplot(data=remessa3, x=TDREMESSA_VL_RENDA)
library(readxl)
remessa3 <- read_excel("D:/brunn/Documents/Bruna/03 Formação Acadêmica/03_ITA/02_Disciplinas/06_AM/Projeto/remessa3.xls")
View(remessa3)
qplot(data=remessa3, x=TDREMESSA_INDICADOR_INADIMPLENCIA)
qplot(data=remessa3, x=TDREMESSA_VL_LIMITE_PARCELA)
qplot(data=remessa3, x=TDREMESSA_VL_RENDA)
library(ggplot2)
qplot(data=remessa3, x=TDREMESSA_INDICADOR_INADIMPLENCIA)
qplot(data=remessa3, x=TDREMESSA_VL_LIMITE_PARCELA)
qplot(data=remessa3, x=TDREMESSA_VL_RENDA)
getwd()
#Windows:
setwd("D:\\brunn\\Documents\\Bruna\\03 Formação Acadêmica\\Cursos\\Curso Programação em R\\Section 05 - Data Frames")
stats <- read.csv("DemographicData.csv")
#Windows:
setwd("D:\\brunn\\Documents\\Bruna\\03 Formação Acadêmica\\Cursos\\Curso Programação em R\\Section 05 - Data Frames")
#Windows:
setwd("D:\\brunn\\Documents\\Bruna\\03 Formação Acadêmica\\Cursos\\Curso Programação em R\\Section 05 - Data Frames")
#Windows:
setwd("D:\\brunn\\Documents\\Bruna\\03 Formação Acadêmica\\05_Cursos\\Curso Programação em R\\Section 05 - Data Frames")
stats <- read.csv("DemographicData.csv")
#-------------------------- # Introduction to qplot
# install.packages("ggplot2")
library(ggplot2)
qplot(data=stats, x=Internet.users)
qplot(data=stats, x=Income.Group, y=Birth.rate)
qplot(data=stats, x=Income.Group, y=Birth.rate, geom="boxplot")
